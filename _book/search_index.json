[["index.html", "1. Modelo Cervezas 1.1 Análisis Descriptivo 1.2 Análisis Bivariado 1.3 Análisis Multivariado 1.4 Verificación de los supuestos", " Códigos Auditoría CCU M. Ignacia Vicuña - Cristian Vásquez 2021-12-01 1. Modelo Cervezas # Cargar librerías de trabajo en R library(readxl) library(scales) library(ggplot2) library(ggpubr) library(forecast) library(dplyr) library(car) library(ggcorrplot) library(FitAR) Importar los datos, dependiendo la ubicación que se encuentren en el directorio ruta = &quot;/Users/mivicuna/Desktop/Proyecto CCU/Información CCU/Cervezas 26-08-2021 V5/DataFrameCervezasInterna.xlsx&quot; datoscer = read_excel(ruta,col_types = c(&quot;date&quot;, &quot;numeric&quot;,&quot;numeric&quot;, &quot;numeric&quot;, &quot;numeric&quot;, &quot;numeric&quot;, &quot;numeric&quot;)) 1.1 Análisis Descriptivo 1.1.1 Venta Volumen de Cervezas A continuación se grafica la variable objetivo de venta volumen de cerveza desde Enero 2014 a Agosto 2021. plot1.1 = ggplot(datoscer,aes(x = PERIODO, y = CERVEZAS)) + geom_point(colour = &quot;skyblue4&quot;, alpha = 0.7) + geom_line(colour = &quot;skyblue4&quot;, alpha = 0.7) + labs(title = &quot;Volumen Industria Cerveza&quot;, x = &quot;Fecha&quot;, y = &quot;Volumen en millones&quot;) + theme_bw() + scale_y_continuous(labels = label_number(suffix = &quot;M&quot;, scale = 1e-6)) El histograma de la venta volumen de cervezas está dado por plot1.2 = ggplot(data = datoscer, aes(x = CERVEZAS)) + geom_histogram(alpha = 0.7, color=&quot;black&quot;, fill = &quot;slategray4&quot;) + labs(title = &quot;Histograma del Volumen Industria Cerveza&quot;, x = &quot;Volumen Industria Cerveza&quot;, y = &quot;Frecuencia&quot;) + scale_x_continuous(labels = label_number(suffix = &quot;M&quot;, scale = 1e-6)) + theme_bw() ggarrange(plot1.1,plot1.2, ncol=2,nrow=1) Las medidas descriptivas de la venta volumen de cervezas se calculan mediante medidas = skimr::skim(select(datoscer,CERVEZAS)) 1.1.2 Variables Independientes Los gráficos de tendencia para cada una de las dimesiones predictoras del modelo #====== Desempleo ======# plot2.1 = ggplot(datoscer,aes(x = PERIODO)) + geom_point(aes(y = DESEMPLEO), alpha = 0.7, colour = &quot;skyblue4&quot;) + geom_line(aes(y = DESEMPLEO), alpha = 0.7, colour = &quot;skyblue4&quot;) + labs(title = &quot;Tasa de Desempleo \\n INE&quot;, x = &quot;Fecha&quot;, y = &quot;Valor Tasa&quot;) + theme_bw() #====== Precio Cervezas ======# plot2.2 = ggplot(datoscer,aes(x = PERIODO)) + geom_point(aes(y = PCERVEZAS_T), alpha = 0.7, colour = &quot;skyblue4&quot;) + geom_line(aes(y = PCERVEZAS_T), alpha = 0.7, colour = &quot;skyblue4&quot;) + labs(title = &quot;Precio Industria \\n Cerveza&quot;, x = &quot;Fecha&quot;, y = &quot;Precio&quot;) + theme_bw() #====== Temperatura Máxima ======# plot2.3 = ggplot(datoscer,aes(x = PERIODO)) + geom_point(aes(y = TEMP_MAX), alpha = 0.7, colour = &quot;skyblue4&quot;) + geom_line(aes(y = TEMP_MAX), alpha = 0.7, colour = &quot;skyblue4&quot;) + labs(title = &quot;Temperatura Máxima \\n Promedio&quot;, x = &quot;Fecha&quot;,y = &quot;Temperatura&quot;) + theme_bw() #====== Índice de Movilidad ======# plot2.4 = ggplot(datoscer,aes(x = PERIODO)) + geom_point(aes(y = MOVILIDAD), alpha = 0.7, colour = &quot;skyblue4&quot;) + geom_line(aes(y = MOVILIDAD), alpha = 0.7, colour = &quot;skyblue4&quot;) + labs(title = &quot;Índice de Movibilidad&quot;, x = &quot;Fecha&quot;, y = &quot;Valor del índice&quot;) + theme_bw() #====== Retiros ======# plot2.5 = ggplot(datoscer,aes(x = PERIODO)) + geom_point(aes(y = RETIROS), alpha = 0.7, colour = &quot;skyblue4&quot;) + geom_line(aes(y = RETIROS), alpha = 0.7, colour = &quot;skyblue4&quot;) + labs(title = &quot;Variable Retiros \\n AFP&quot;, x = &quot;Fecha&quot;, y = &quot;Valor del índice&quot;) + theme_bw() ggarrange(plot2.1,plot2.2,plot2.3,plot2.4,plot2.5,ncol=3,nrow=2) Los histogramas de distribuciones de cada dimensión predictiva #====== Desempleo ======# plot3.1 = ggplot(data = datoscer, aes(x = DESEMPLEO)) + geom_histogram(alpha = 0.7, color=&quot;black&quot;, fill = &quot;slategray4&quot;) + labs(title = &quot;Histograma de la tasa \\n de desempleo&quot;, x = &quot;Tasa desempleo&quot;, y = &quot;Frecuencia&quot;) + theme_bw() #====== Precio Cervezas ======# plot3.2 = ggplot(data = datoscer, aes(x = PCERVEZAS_T)) + geom_histogram(alpha = 0.7, color=&quot;black&quot;, fill = &quot;slategray4&quot;) + labs(title = &quot;Histograma de precio \\n industria cerveza&quot;, x = &quot;Precio Cerveza&quot;, y = &quot;Frecuencia&quot;) + theme_bw() #====== Temperatura Máxima ======# plot3.3 = ggplot(data = datoscer, aes(x = TEMP_MAX)) + geom_histogram(alpha = 0.7, color=&quot;black&quot;, fill = &quot;slategray4&quot;) + labs(title = &quot;Histograma de la \\n temperatura máxima&quot;, x = &quot;Temperatura máxima&quot;, y = &quot;Frecuencia&quot;) + theme_bw() #====== Índice de Movilidad ======# plot3.4 = ggplot(data = datoscer, aes(x = MOVILIDAD)) + geom_histogram(alpha = 0.7, color=&quot;black&quot;, fill = &quot;slategray4&quot;) + labs(title = &quot;Histograma de índice \\n de movilidad &quot;, x = &quot;índice movilidad&quot;,y = &quot;Frecuencia&quot;) + theme_bw() #====== Retiros ======# plot3.5 = ggplot(data = datoscer, aes(x = RETIROS)) + geom_histogram(alpha = 0.7, color=&quot;black&quot;, fill = &quot;slategray4&quot;) + labs(title = &quot;Histograma de retiros \\n AFP&quot;, x = &quot;Retiros AFP&quot;, y = &quot;Frecuencia&quot;) + theme_bw() ggarrange(plot3.1,plot3.2,plot3.3,plot3.4,plot3.5,ncol=3,nrow=2) medidas_variables = skimr::skim(select(datoscer,-c(PERIODO,CERVEZAS))) 1.2 Análisis Bivariado A continuación los gráficos de dispersión de la variable objetivo con las dimensiones independientes subset2.1 &lt;- select(datoscer,-c(PERIODO,CERVEZAS)) Cervezas &lt;- datoscer$CERVEZAS myplots &lt;- list() for(i in 1:ncol(subset2.1)){ col &lt;- names(subset2.1)[i] aux &lt;- bind_cols(Cervezas = Cervezas,select(datoscer,col)) ggp &lt;- ggplot(aux, aes_string(x = col , y = &quot;Cervezas&quot;)) + geom_point(color = &quot;slategray4&quot;,alpha=0.7) + geom_smooth(method = &quot;lm&quot;,col=&quot;red&quot;) + labs(y = &quot;Volumen Industria Cerveza&quot;) + scale_y_continuous(labels = label_number(suffix = &quot; M&quot;, scale = 1e-6)) theme_bw() myplots[[i]] &lt;- ggp rm(ggp,aux,col) } plot3.3 &lt;- ggarrange(myplots[[1]],myplots[[2]],myplots[[3]], myplots[[4]],myplots[[5]], nrow = 2, ncol = 3, common.legend = TRUE) annotate_figure(plot3.3,top = text_grob(&quot;Gráficos de dispersión las variables independientes&quot;)) Cálculo de correlaciones de la variable objetivo con las dimensiones utilizadas tibble(Variable = row.names(cor(subset2.1, Cervezas)), Correlacion = as.numeric(cor(subset2.1, Cervezas))) %&gt;% arrange(desc(abs(Correlacion))) ## # A tibble: 5 x 2 ## Variable Correlacion ## &lt;chr&gt; &lt;dbl&gt; ## 1 TEMP_MAX 0.666 ## 2 RETIROS 0.416 ## 3 DESEMPLEO 0.258 ## 4 PCERVEZAS_T 0.201 ## 5 MOVILIDAD -0.175 Ajuste del Modelo CCU Cervezas = ts(datoscer$CERVEZAS, frequency=12, start=c(2014,1)) TYPCYD = ts(as.matrix(select(datoscer,-c(PERIODO,CERVEZAS))), frequency=12, start=c(2014,1)) ## Modelo Ajustado con la función auto.arima() arimaCervezas = auto.arima(Cervezas, xreg=TYPCYD) Se ajusta el modelo obtenido con la función auto.arima( ) utilizando la función Arima( ) del paquete forecast de R, ## Ajustar el modelo obtenido con autoarima con la función Arima model_auto_arima_cerv = Arima(Cervezas,order = c(3, 0, 0), seasonal = list(order = c(0, 1, 1), period = 12),include.drift =TRUE,xreg = TYPCYD ) Se evalúa la significancia de los parámetros realizando test \\(H_0:\\beta_i = 0\\) v/s \\(H_1: \\beta_i \\neq 0\\) para \\(i=1,2,3,4,5\\) ### Significancia de los parámetros del modelo beta_est = model_auto_arima_cerv$coef sd_est = sqrt(diag(model_auto_arima_cerv$var.coef)) value_t = abs(beta_est/sd_est) 1.3 Análisis Multivariado A continuación los gráficos de heatmap de correlaciones de a pares de las dimensiones independientes variables = colnames(subset2.1[,1:5]) corr_variables = matrix(round(cor(subset2.1[,1:5]),3),nrow=5,ncol=5, dimnames = list(variables,variables)) ggcorrplot(corr_variables, hc.order = TRUE, outline.col = &quot;black&quot;, lab = TRUE, ) + theme(axis.text.x = element_text(size = 8), axis.text.y = element_text(size = 8)) 1.4 Verificación de los supuestos 1.4.1 Normalidad datoscer$Residuos &lt;- residuals(model_auto_arima_cerv) # Residuos Estandarizados datoscer$Residuos_z = (datoscer$Residuos - mean(datoscer$Residuos))/sd(datoscer$Residuos) # ===== QQ-plot =====# plot4.3 &lt;- ggplot(datoscer, aes(sample = Residuos_z)) + stat_qq() + geom_abline(slope=1) + labs(title = &quot;Normal Q-Q Plot&quot;, x = &quot;Theoretical Quantiles&quot;, y = &quot;Sample Quantiles&quot;) + theme_bw() x = seq(min(seq(min(datoscer$Residuos_z),max(datoscer$Residuos_z),len=1000)), max(datoscer$Residuos_z),len=1000) gg = dnorm(x,0,1) datosplot &lt;- data.frame(x = x, y = gg) plot4.4 &lt;- ggplot(data = datoscer, aes(x = Residuos_z)) + geom_histogram(aes(y=..density..),alpha = 0.5, color=&quot;black&quot;, fill = &quot;gray50&quot;) + geom_point(data=datosplot, aes(x=x,y=y), color=&quot;skyblue4&quot;) + labs(title = &quot;Distribución Normal&quot;, x = &quot;Residuos&quot;) + theme_bw() ggarrange(plot4.3,plot4.4,ncol=2) 1.4.2 Independencia plot1 = ggAcf(datoscer$Residuos,lag=30) + labs(title = &quot;ACF Residuos Modelo Cervezas&quot;) + ylim(-0.3,0.3) + theme_bw() plot1 El test de Ljung-Box para testear simúltaneamente que sean incorrelacionados los errores para varios lag de tiempo Est = c() valorp = c() for( i in 1:12){ Test = Box.test(datoscer$Residuos, lag = i, type = &quot;Ljung-Box&quot;) Est[i] = Test$statistic valorp[i] = Test$p.value } tibble(Lag = seq(1,12),Estadistico = Est, valor_p = valorp) ## # A tibble: 12 x 3 ## Lag Estadistico valor_p ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 0.00951 0.922 ## 2 2 0.0397 0.980 ## 3 3 0.0490 0.997 ## 4 4 0.0721 0.999 ## 5 5 0.0728 1.00 ## 6 6 0.588 0.997 ## 7 7 0.793 0.998 ## 8 8 1.33 0.995 ## 9 9 3.59 0.936 ## 10 10 3.94 0.950 ## 11 11 4.12 0.966 ## 12 12 4.47 0.973 Gráfico de los valores-p del test Ljung-Box LBQPlot(datoscer$Residuos) 1.4.3 No colinealidad Regresion_Model_Cer &lt;- lm(CERVEZAS ~ -1 + DESEMPLEO + PCERVEZAS_T +TEMP_MAX + MOVILIDAD +RETIROS,data=datoscer ) tibble(Variable = names(vif(Regresion_Model_Cer)), VIF = round(vif(Regresion_Model_Cer),3))%&gt;%as.data.frame() ## Variable VIF ## 1 DESEMPLEO 193.789 ## 2 PCERVEZAS_T 189.882 ## 3 TEMP_MAX 18.857 ## 4 MOVILIDAD 8.578 ## 5 RETIROS 1.893 1.4.4 Homocedasticidad plot1 = ggplot(data = subset2.1, aes(model_auto_arima_cerv$fitted,model_auto_arima_cerv$residuals)) + geom_point() + geom_smooth(color = &quot;firebrick&quot;, se = FALSE) + geom_hline(yintercept = 0) + labs( title = &quot;Gráfico Homocedasticidad Modelo Cervezas &quot;, y = &quot;Residuos&quot;, x = &quot;Ventas Volumen Proyectadas&quot;) + theme_bw() plot1 "],["modelo-gaseosas.html", "2. Modelo Gaseosas 2.1 Análisis Descriptivo 2.2 Análisis Bivariado 2.3 Análisis Multivariado 2.4 Verificación de los supuestos", " 2. Modelo Gaseosas Importar los datos, dependiendo la ubicación que se encuentren en el directorio ruta = &quot;/Users/mivicuna/Desktop/Proyecto CCU/Información CCU/Gaseosas 15-09-2021/Data Frame Gaseosas Interna.xlsx&quot; datosgas = read_excel(ruta,col_types = c(&quot;date&quot;, &quot;numeric&quot;,&quot;numeric&quot;, &quot;numeric&quot;, &quot;numeric&quot;, &quot;numeric&quot;, &quot;numeric&quot;)) 2.1 Análisis Descriptivo 2.1.1 Venta Volumen de Gaseosas A continuación se grafica la variable objetivo de venta volumen de gaseosas desde Enero 2015 a Agosto 2021. plot1.1 = ggplot(datosgas,aes(x = PERIODO, y = GASEOSAS)) + geom_point(colour = &quot;skyblue4&quot;, alpha = 0.7) + geom_line(colour = &quot;skyblue4&quot;, alpha = 0.7) + labs(title = &quot;Volumen Industria Gaseosas&quot;, x = &quot;Fecha&quot;, y = &quot;Volumen en millones&quot;) + theme_bw() + scale_y_continuous(labels = label_number(suffix = &quot;M&quot;, scale = 1e-6)) El histograma de la venta volumen de gaseosas está dado por plot1.2 = ggplot(data = datosgas, aes(x = GASEOSAS)) + geom_histogram(alpha = 0.7, color=&quot;black&quot;, fill = &quot;slategray4&quot;) + labs(title = &quot;Histograma del Volumen Industria Gaseosas&quot;, x = &quot;Volumen Industria Gaseosas&quot;, y = &quot;Frecuencia&quot;) + scale_x_continuous(labels = label_number(suffix = &quot;M&quot;, scale = 1e-6)) + theme_bw() ggarrange(plot1.1,plot1.2, ncol=2,nrow=1) Las medidas descriptivas de la venta volumen de gaseosas se calculan mediante medidas = skimr::skim(select(datosgas,GASEOSAS)) 2.2.2 Variables Independientes Los gráficos de tendencia para cada una de las dimesiones predictoras del modelo #====== Desempleo ======# plot2.1 = ggplot(datosgas,aes(x = PERIODO)) + geom_point(aes(y = DESEMPLEO), alpha = 0.7, colour = &quot;skyblue4&quot;) + geom_line(aes(y = DESEMPLEO), alpha = 0.7, colour = &quot;skyblue4&quot;) + labs(title = &quot;Tasa de Desempleo \\n INE&quot;, x = &quot;Fecha&quot;, y = &quot;Valor Tasa&quot;) + theme_bw() #====== Precio Gasesosas ======# plot2.2 = ggplot(datosgas,aes(x = PERIODO)) + geom_point(aes(y = PGASEOSAS_T), alpha = 0.7, colour = &quot;skyblue4&quot;) + geom_line(aes(y = PGASEOSAS_T), alpha = 0.7, colour = &quot;skyblue4&quot;) + labs(title = &quot;Precio Industria \\n Gaseosas&quot;, x = &quot;Fecha&quot;, y = &quot;Precio&quot;) + theme_bw() #====== Temperatura Máxima ======# plot2.3 = ggplot(datosgas,aes(x = PERIODO)) + geom_point(aes(y = TEMP_MAX), alpha = 0.7, colour = &quot;skyblue4&quot;) + geom_line(aes(y = TEMP_MAX), alpha = 0.7, colour = &quot;skyblue4&quot;) + labs(title = &quot;Temperatura Máxima \\n Promedio&quot;, x = &quot;Fecha&quot;,y = &quot;Temperatura&quot;) + theme_bw() #====== Índice de Movilidad ======# plot2.4 = ggplot(datosgas,aes(x = PERIODO)) + geom_point(aes(y = MOVILIDAD), alpha = 0.7, colour = &quot;skyblue4&quot;) + geom_line(aes(y = MOVILIDAD), alpha = 0.7, colour = &quot;skyblue4&quot;) + labs(title = &quot;Índice de Movibilidad&quot;, x = &quot;Fecha&quot;, y = &quot;Valor del índice&quot;) + theme_bw() #====== Retiros ======# plot2.5 = ggplot(datosgas,aes(x = PERIODO)) + geom_point(aes(y = RETIROS), alpha = 0.7, colour = &quot;skyblue4&quot;) + geom_line(aes(y = RETIROS), alpha = 0.7, colour = &quot;skyblue4&quot;) + labs(title = &quot;Variable Retiros \\n AFP&quot;, x = &quot;Fecha&quot;, y = &quot;Valor del índice&quot;) + theme_bw() ggarrange(plot2.1,plot2.2,plot2.3,plot2.4,plot2.5,ncol=3,nrow=2) Los histogramas de distribuciones de cada dimensión predictiva #====== Desempleo ======# plot3.1 = ggplot(data = datosgas, aes(x = DESEMPLEO)) + geom_histogram(alpha = 0.7, color=&quot;black&quot;, fill = &quot;slategray4&quot;) + labs(title = &quot;Histograma de la tasa \\n de desempleo&quot;, x = &quot;Tasa desempleo&quot;, y = &quot;Frecuencia&quot;) + theme_bw() #====== Precio Gaseosas ======# plot3.2 = ggplot(data = datosgas, aes(x = PGASEOSAS_T)) + geom_histogram(alpha = 0.7, color=&quot;black&quot;, fill = &quot;slategray4&quot;) + labs(title = &quot;Histograma de precio \\n industria gasesosas&quot;, x = &quot;Precio Gaseosas&quot;, y = &quot;Frecuencia&quot;) + theme_bw() #====== Temperatura Máxima ======# plot3.3 = ggplot(data = datosgas, aes(x = TEMP_MAX)) + geom_histogram(alpha = 0.7, color=&quot;black&quot;, fill = &quot;slategray4&quot;) + labs(title = &quot;Histograma de la \\n temperatura máxima&quot;, x = &quot;Temperatura máxima&quot;, y = &quot;Frecuencia&quot;) + theme_bw() #====== Índice de Movilidad ======# plot3.4 = ggplot(data = datosgas, aes(x = MOVILIDAD)) + geom_histogram(alpha = 0.7, color=&quot;black&quot;, fill = &quot;slategray4&quot;) + labs(title = &quot;Histograma de índice \\n de movilidad &quot;, x = &quot;índice movilidad&quot;,y = &quot;Frecuencia&quot;) + theme_bw() #====== Retiros ======# plot3.5 = ggplot(data = datosgas, aes(x = RETIROS)) + geom_histogram(alpha = 0.7, color=&quot;black&quot;, fill = &quot;slategray4&quot;) + labs(title = &quot;Histograma de retiros \\n AFP&quot;, x = &quot;Retiros AFP&quot;, y = &quot;Frecuencia&quot;) + theme_bw() ggarrange(plot3.1,plot3.2,plot3.3,plot3.4,plot3.5,ncol=3,nrow=2) medidas_variables = skimr::skim(select(datosgas,-c(PERIODO,GASEOSAS))) 2.2 Análisis Bivariado A continuación los gráficos de dispersión de la variable objetivo con las dimensiones independientes subset2.2 &lt;- select(datosgas,-c(PERIODO,GASEOSAS)) Gaseosas &lt;- datosgas$GASEOSAS myplots &lt;- list() for(i in 1:ncol(subset2.2)){ col &lt;- names(subset2.2)[i] aux &lt;- bind_cols(Gaseosas = Gaseosas,select(datosgas,col)) ggp &lt;- ggplot(aux, aes_string(x = col , y = &quot;Gaseosas&quot;)) + geom_point(color = &quot;slategray4&quot;,alpha=0.7) + geom_smooth(method = &quot;lm&quot;,col=&quot;red&quot;) + labs(y = &quot;Volumen Industria Gaseosas&quot;) + scale_y_continuous(labels = label_number(suffix = &quot; M&quot;, scale = 1e-6)) theme_bw() myplots[[i]] &lt;- ggp rm(ggp,aux,col) } plot3.3 &lt;- ggarrange(myplots[[1]],myplots[[2]],myplots[[3]], myplots[[4]],myplots[[5]], nrow = 2, ncol = 3, common.legend = TRUE) annotate_figure(plot3.3,top = text_grob(&quot;Gráficos de dispersión las variables independientes&quot;)) Cálculo de correlaciones de la variable objetivo con las dimensiones utilizadas tibble(Variable = row.names(cor(subset2.2, Gaseosas)), Correlacion = as.numeric(cor(subset2.2, Gaseosas))) %&gt;% arrange(desc(abs(Correlacion))) ## # A tibble: 5 x 2 ## Variable Correlacion ## &lt;chr&gt; &lt;dbl&gt; ## 1 TEMP_MAX 0.761 ## 2 RETIROS 0.185 ## 3 MOVILIDAD 0.153 ## 4 DESEMPLEO -0.125 ## 5 PGASEOSAS_T 0.00333 Ajuste del Modelo CCU Gaseosas = ts(datosgas$GASEOSAS, frequency=12, start=c(2015,1)) TYPCYD2 = ts(as.matrix(select(datosgas,-c(PERIODO,GASEOSAS))), frequency=12, start=c(2015,1)) ## Modelo Ajustado con la función auto.arima() arimaCervezas = auto.arima(Gaseosas, xreg=TYPCYD2) Se ajusta el modelo obtenido con la función auto.arima( ) utilizando la función Arima( ) del paquete forecast de R, ## Ajustar el modelo obtenido con autoarima con la función Arima model_auto_arima_gas = Arima(Gaseosas,order = c(3, 0, 0), seasonal = list(order = c(0, 1, 1), period = 12),include.drift =TRUE,xreg = TYPCYD2 ) Se evalúa la significancia de los parámetros realizando test \\(H_0:\\beta_i = 0\\) v/s \\(H_1: \\beta_i \\neq 0\\) para \\(i=1,2,3,4,5\\) ### Significancia de los parámetros del modelo beta_est = model_auto_arima_gas$coef sd_est = sqrt(diag(model_auto_arima_gas$var.coef)) value_t = abs(beta_est/sd_est) 2.3 Análisis Multivariado A continuación los gráficos de heatmap de correlaciones de a pares de las dimensiones independientes variables = colnames(subset2.2[,1:5]) corr_variables = matrix(round(cor(subset2.2[,1:5]),3),nrow=5,ncol=5, dimnames = list(variables,variables)) ggcorrplot(corr_variables, hc.order = TRUE, outline.col = &quot;black&quot;, lab = TRUE, ) + theme(axis.text.x = element_text(size = 8), axis.text.y = element_text(size = 8)) 2.4 Verificación de los supuestos 2.4.1 Normalidad datosgas$Residuos &lt;- residuals(model_auto_arima_gas) # Residuos Estandarizados datosgas$Residuos_z = (datosgas$Residuos - mean(datosgas$Residuos))/sd(datosgas$Residuos) # ===== QQ-plot =====# plot4.3 &lt;- ggplot(datosgas, aes(sample = Residuos_z)) + stat_qq() + geom_abline(slope=1) + labs(title = &quot;Normal Q-Q Plot&quot;, x = &quot;Theoretical Quantiles&quot;, y = &quot;Sample Quantiles&quot;) + theme_bw() x = seq(min(seq(min(datosgas$Residuos_z),max(datosgas$Residuos_z),len=1000)), max(datosgas$Residuos_z),len=1000) gg = dnorm(x,0,1) datosplot &lt;- data.frame(x = x, y = gg) plot4.4 &lt;- ggplot(data = datosgas, aes(x = Residuos_z)) + geom_histogram(aes(y=..density..),alpha = 0.5, color=&quot;black&quot;, fill = &quot;gray50&quot;) + geom_point(data=datosplot, aes(x=x,y=y), color=&quot;skyblue4&quot;) + labs(title = &quot;Distribución Normal&quot;, x = &quot;Residuos&quot;) + theme_bw() ggarrange(plot4.3,plot4.4,ncol=2) 2.4.2 Independencia plot1 = ggAcf(datosgas$Residuos,lag=30) + labs(title = &quot;ACF Residuos Modelo Gaseosas&quot;) + ylim(-0.3,0.3) + theme_bw() plot1 El test de Ljung-Box para testear simúltaneamente que sean incorrelacionados los errores para varios lag de tiempo Est = c() valorp = c() for( i in 1:12){ Test = Box.test(datosgas$Residuos, lag = i, type = &quot;Ljung-Box&quot;) Est[i] = Test$statistic valorp[i] = Test$p.value } tibble(Lag = seq(1,12),Estadistico = Est, valor_p = valorp) ## # A tibble: 12 x 3 ## Lag Estadistico valor_p ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 0.00200 0.964 ## 2 2 0.0261 0.987 ## 3 3 0.0282 0.999 ## 4 4 0.987 0.912 ## 5 5 2.30 0.806 ## 6 6 2.36 0.884 ## 7 7 2.49 0.928 ## 8 8 3.39 0.908 ## 9 9 6.53 0.686 ## 10 10 6.71 0.752 ## 11 11 7.63 0.746 ## 12 12 7.63 0.813 Gráfico de los valores-p del test Ljung-Box LBQPlot(datosgas$Residuos) 2.4.3 No colinealidad Regresion_Model_Gas &lt;- lm(GASEOSAS ~ -1 + DESEMPLEO + PGASEOSAS_T +TEMP_MAX + MOVILIDAD +RETIROS,data=datosgas ) tibble(Variable = names(vif(Regresion_Model_Gas)), VIF = round(vif(Regresion_Model_Gas),3))%&gt;%as.data.frame() ## Variable VIF ## 1 DESEMPLEO 209.937 ## 2 PGASEOSAS_T 210.772 ## 3 TEMP_MAX 20.191 ## 4 MOVILIDAD 8.554 ## 5 RETIROS 2.109 2.4.4 Homocedasticidad plot1 = ggplot(data = subset2.2, aes(model_auto_arima_gas$fitted,model_auto_arima_gas$residuals)) + geom_point() + geom_smooth(color = &quot;firebrick&quot;, se = FALSE) + geom_hline(yintercept = 0) + labs( title = &quot;Gráfico Homocedasticidad Modelo Gaseosas &quot;, y = &quot;Residuos&quot;, x = &quot;Ventas Volumen Proyectadas&quot;) + theme_bw() plot1 "]]
